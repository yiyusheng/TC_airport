WIFIAPTag = df$WIFIAPTag[1],
slice10min = tsStr)
r <- data.frame(passengerCount = as.numeric(fc$mean),
WIFIAPTag = df$WIFIAPTag[1],
slice10min = tsStr)
View(r)
r <- data.frame(passengerCount = round(as.numeric(fc$mean),digits = 2),
WIFIAPTag = df$WIFIAPTag[1],
slice10min = tsStr)
View(r)
df <- split.dataAP10min[[234]]
pred.start <- as.POSIXct('2016-09-14 15:00:00',tz = 'UTC')
pred.end <- as.POSIXct('2016-09-14 18:00:00',tz = 'UTC')
div <- seq.POSIXt(pred.start,pred.end,10*60)
div <- div[1:(length(div)-1)]
dfTrain <- subset(df,timeStamp < pred.start)
dfTest <- subset(df,timeStamp < pred.end & timeStamp >= pred.start)
tsdata <- ts(dfTrain$passengerCount,start = c(2016),frequency = 144)
fit <- auto.arima(tsdata,D = 1)
fc <- forecast.Arima(fit,h = numPred)
fc <- forecast.Arima(fit,h = length(div))
tsStr <- as.character(div)
tsStr <- paste(substr(tsStr,1,10),substr(tsStr,12,13),as.numeric(substr(tsStr,15,16))/10,sep='-')
r <- data.frame(passengerCount = round(as.numeric(fc$mean),digits = 2),
WIFIAPTag = df$WIFIAPTag[1],
slice10min = tsStr)
View(r)
rm(list = ls())
source('head.R')
source('dirFunc.R')
require(forecast)
load(file.path(dir_data,'dataLoad.Rda'))
def_margin()
####################################
# S1. test of auto.arima(). We use split.dataAP to build the arima model and predict pc.
# Then we scale timeStamp to 10 minutes and calculate the error
test_arima <- function(df){
cat(sprintf('test_AFR::test_arima\tWIFIAPTag:%s\twid:%.0f\n',
df$WIFIAPTag[1],df$wid[1]))
pred.start <- as.POSIXct('2016-09-14 15:00:00',tz = 'UTC')
pred.end <- as.POSIXct('2016-09-14 18:00:00',tz = 'UTC')
div <- seq.POSIXt(pred.start,pred.end,10*60)
div <- div[1:(length(div)-1)]
dfTrain <- subset(df,timeStamp < pred.start)
dfTest <- subset(df,timeStamp < pred.end & timeStamp >= pred.start)
tsdata <- ts(dfTrain$passengerCount,start = c(2016),frequency = 144)
fit <- auto.arima(tsdata,D = 1)
fc <- forecast.Arima(fit,h = length(div))
tsStr <- as.character(div)
tsStr <- paste(substr(tsStr,1,10),substr(tsStr,12,13),as.numeric(substr(tsStr,15,16))/10,sep='-')
r <- data.frame(passengerCount = round(as.numeric(fc$mean),digits = 2),
WIFIAPTag = df$WIFIAPTag[1],
slice10min = tsStr)
r
# plot(fc)
# dfTest$pred <- fc$mean
# dfTest$error <- (dfTest$passengerCount - dfTest$pred)^2
# sum.error <- sum(dfTest$error)
# p <- plot_comp(dfTest) + ggtitle(df$WIFIAPTag[1])
# for 10 mins
# dfTest$ts10min <- add_ts(dfTest$timeStamp,pred.start,pred.end,10)
# dfTest.10min <- data.frame(WIFIAPTag = dfTest$WIFIAPTag[1],
#                            timeStamp = levels(dfTest$ts10min),
#                            passengerCount = as.numeric(tapply(dfTest$passengerCount,
#                                                               dfTest$ts10min,sum)),
#                            pred = as.numeric(tapply(dfTest$pred,dfTest$ts10min,sum)))
# dfTest.10min$error <- (dfTest.10min$passengerCount - dfTest.10min$pred)^2
# sum.error.10min <- sum(dfTest.10min$error)
}
a <- test_arima(split.dataAP10min[[3]])
rm(list = ls())
source('head.R')
source('dirFunc.R')
require(forecast)
load(file.path(dir_data,'dataLoad.Rda'))
def_margin()
####################################
# S1. test of auto.arima(). We use split.dataAP to build the arima model and predict pc.
# Then we scale timeStamp to 10 minutes and calculate the error
test_arima <- function(df){
cat(sprintf('test_AFR::test_arima\tWIFIAPTag:%s\twid:%.0f\n',
df$WIFIAPTag[1],df$wid[1]))
pred.start <- as.POSIXct('2016-09-14 15:00:00',tz = 'UTC')
pred.end <- as.POSIXct('2016-09-14 18:00:00',tz = 'UTC')
div <- seq.POSIXt(pred.start,pred.end,10*60)
div <- div[1:(length(div)-1)]
dfTrain <- subset(df,timeStamp < pred.start)
dfTest <- subset(df,timeStamp < pred.end & timeStamp >= pred.start)
tsdata <- ts(dfTrain$passengerCount,start = c(2016),frequency = 144)
fit <- auto.arima(tsdata,D = 1)
fc <- forecast.Arima(fit,h = length(div))
tsStr <- as.character(div)
tsStr <- paste(substr(tsStr,1,10),substr(tsStr,12,13),as.numeric(substr(tsStr,15,16))/10,sep='-')
r <- data.frame(passengerCount = round(as.numeric(fc$mean),digits = 2),
WIFIAPTag = df$WIFIAPTag[1],
slice10min = tsStr)
r
# plot(fc)
# dfTest$pred <- fc$mean
# dfTest$error <- (dfTest$passengerCount - dfTest$pred)^2
# sum.error <- sum(dfTest$error)
# p <- plot_comp(dfTest) + ggtitle(df$WIFIAPTag[1])
# for 10 mins
# dfTest$ts10min <- add_ts(dfTest$timeStamp,pred.start,pred.end,10)
# dfTest.10min <- data.frame(WIFIAPTag = dfTest$WIFIAPTag[1],
#                            timeStamp = levels(dfTest$ts10min),
#                            passengerCount = as.numeric(tapply(dfTest$passengerCount,
#                                                               dfTest$ts10min,sum)),
#                            pred = as.numeric(tapply(dfTest$pred,dfTest$ts10min,sum)))
# dfTest.10min$error <- (dfTest.10min$passengerCount - dfTest.10min$pred)^2
# sum.error.10min <- sum(dfTest.10min$error)
}
a <- test_arima(split.dataAP10min[[3]])
df <- split.dataAP10min[[3]]
cat(sprintf('test_AFR::test_arima\tWIFIAPTag:%s\twid:%.0f\n',
df$WIFIAPTag[1],df$wid[1]))
rm(list = ls())
source('head.R')
source('dirFunc.R')
require(forecast)
load(file.path(dir_data,'dataLoad.Rda'))
def_margin()
df <- split.dataAP10min[[3]]
cat(sprintf('test_AFR::test_arima\tWIFIAPTag:%s\twid:%.0f\n',
df$WIFIAPTag[1],df$wid[1]))
pred.start <- as.POSIXct('2016-09-14 15:00:00',tz = 'UTC')
pred.end <- as.POSIXct('2016-09-14 18:00:00',tz = 'UTC')
div <- seq.POSIXt(pred.start,pred.end,10*60)
div <- div[1:(length(div)-1)]
dfTrain <- subset(df,timeStamp < pred.start)
dfTest <- subset(df,timeStamp < pred.end & timeStamp >= pred.start)
tsdata <- ts(dfTrain$passengerCount,start = c(2016),frequency = 144)
fit <- auto.arima(tsdata,D = 1)
fc <- forecast.Arima(fit,h = length(div))
tsStr <- as.character(div)
tsStr <- paste(substr(tsStr,1,10),substr(tsStr,12,13),as.numeric(substr(tsStr,15,16))/10,sep='-')
r <- data.frame(passengerCount = round(as.numeric(fc$mean),digits = 2),
WIFIAPTag = df$WIFIAPTag[1],
slice10min = tsStr)
View(r)
source('~/Code/R/TC_airport/test_ACF.R')
r[[1]]
r1 <- do.call(rbind,r)
View(r1)
summary(r1$passengerCount)
r1$passengerCount[r1$passengerCount == 0] <- 0
summary(r1)
r1 <- do.call(rbind,r)
r1$passengerCount[r1$passengerCount < 0] <- 0
save(r,r1,file = file.path(dir_data,'r1012.Rda'))
write.csv(r1,quote = F,row.names = F)
write.csv(r1,file = file.path(dir_data,'r1012.csv',quote = F,row.names = F)
)
write.csv(r1,file = file.path(dir_data,'r1012.csv'),quote = F,row.names = F)
sample(1:length(split.dataAP),30)
idx <- sample(1:length(split.dataAP),30)
idx <- sample(1:length(split.dataAP),30)
save(idx,file.path(dir_data,'smpIdx.Rda'))
idx <- sample(1:length(split.dataAP),30)
save(idx,file = file.path(dir_data,'smpIdx.Rda'))
load(file.path(dir_data,'smpIdx.Rda'))
obj.Para <- split.dataAP10min[idx]
df <- obj.Para[[1]]
View(df)
plot(df$passengerCount)
ggAcf(df$passengerCount)
ggAcf(diff(df$passengerCount))
use10min = T
cat(sprintf('test_AFR::test_arima\tWIFIAPTag:%s\twid:%.0f\n',
df$WIFIAPTag[1],df$wid[1]))
pred.start <- as.POSIXct('2016-09-13 15:00:00',tz = 'UTC')
pred.end <- as.POSIXct('2016-09-13 18:00:00',tz = 'UTC')
# timeStamp divide
int.min <- ifelse(use10min,10,1)
div <- seq.POSIXt(pred.start,pred.end,int.min*60)
div <- div[1:(length(div)-1)]
# generate train and test
df.train <- subset(df,timeStamp < pred.start)
df.test <- subset(df,timeStamp < pred.end & timeStamp >= pred.start)
# generate time seris data, build the arima model and forecast new data
60*24
tsdata <- ts(df.train$passengerCount,start = c(2016),frequency = 1440/int.min)
fit <- auto.arima(tsdata,D = 1)
fc <- forecast.Arima(fit,h = length(div))
plot(fc)
tsStr <- as.character(div)
tsStr <- paste(substr(tsStr,1,10),substr(tsStr,12,13),as.numeric(substr(tsStr,15,16))/int.min,sep='-')
df.test$pred <- fc$mean
View(df.test)
if(use10min = F){
df.test$ts10min <- add_ts(df.test$timeStamp,pred.start,pred.end,10)
if(use10min == F){
df.test$ts10min <- add_ts(df.test$timeStamp,pred.start,pred.end,10)
df.test.10min <- data.frame(WIFIAPTag = df.test$WIFIAPTag[1],
timeStamp = levels(df.test$ts10min),
real = as.numeric(tapply(df.test$passengerCount,df.test$ts10min,sum)),
passengerCount = as.numeric(tapply(df.test$pred,df.test$ts10min,sum)))
df.error <- df.test.10min
}else{
df.error <- df.test
}
# error calculate
df.error$error <- (df.error$passengerCount - df.error$pred)^2
sum.error <- sum(df.error$error)
View(df.test)
790*750
tsdf <- data.frame(ts = div,tsstr = tsStr)
View(tsdf)
100000/750
x <- test_arima(obj.Para[[2]])
x
test_arima <- function(df,use10min = T){
cat(sprintf('test_AFR::test_arima\tWIFIAPTag:%s\twid:%.0f\n',
df$WIFIAPTag[1],df$wid[1]))
pred.start <- as.POSIXct('2016-09-13 15:00:00',tz = 'UTC')
pred.end <- as.POSIXct('2016-09-13 18:00:00',tz = 'UTC')
# timeStamp divide
int.min <- ifelse(use10min,10,1)
div <- seq.POSIXt(pred.start,pred.end,int.min*60)
div <- div[1:(length(div)-1)]
# generate train and test
df.train <- subset(df,timeStamp < pred.start)
df.test <- subset(df,timeStamp < pred.end & timeStamp >= pred.start)
# generate time seris data, build the arima model and forecast new data
tsdata <- ts(df.train$passengerCount,start = c(2016),frequency = 1440/int.min)
fit <- auto.arima(tsdata,D = 1)
fc <- forecast.Arima(fit,h = length(div))
plot(fc)
# generate timeStamp string for result submit
tsStr <- as.character(div)
tsStr <- paste(substr(tsStr,1,10),substr(tsStr,12,13),as.numeric(substr(tsStr,15,16))/int.min,sep='-')
tsdf <- data.frame(ts = div,tsstr = tsStr)
# for 10 mins
df.test$pred <- fc$mean
if(use10min == F){
df.test$ts10min <- add_ts(df.test$timeStamp,pred.start,pred.end,10)
df.test.10min <- data.frame(WIFIAPTag = df.test$WIFIAPTag[1],
timeStamp = levels(df.test$ts10min),
real = as.numeric(tapply(df.test$passengerCount,df.test$ts10min,sum)),
passengerCount = as.numeric(tapply(df.test$pred,df.test$ts10min,sum)))
df.error <- df.test.10min
}else{
df.error <- df.test
}
# error calculate
df.error$error <- (df.error$passengerCount - df.error$pred)^2
sum.error <- sum(df.error$error)
sum.error
}
View(gen_pc_by_meanhour)
View(x)
x <- test_arima(obj.Para[[2]])
test_arima <- function(df,use10min = T){
cat(sprintf('test_AFR::test_arima\tWIFIAPTag:%s\twid:%.0f\n',
df$WIFIAPTag[1],df$wid[1]))
pred.start <- as.POSIXct('2016-09-13 15:00:00',tz = 'UTC')
pred.end <- as.POSIXct('2016-09-13 18:00:00',tz = 'UTC')
# timeStamp divide
int.min <- ifelse(use10min,10,1)
div <- seq.POSIXt(pred.start,pred.end,int.min*60)
div <- div[1:(length(div)-1)]
# generate train and test
df.train <- subset(df,timeStamp < pred.start)
df.test <- subset(df,timeStamp < pred.end & timeStamp >= pred.start)
# generate time seris data, build the arima model and forecast new data
tsdata <- ts(df.train$passengerCount,start = c(2016),frequency = 1440/int.min)
fit <- auto.arima(tsdata,D = 1)
fc <- forecast.Arima(fit,h = length(div))
plot(fc)
# generate timeStamp string for result submit
tsStr <- as.character(div)
tsStr <- paste(substr(tsStr,1,10),substr(tsStr,12,13),as.numeric(substr(tsStr,15,16))/int.min,sep='-')
tsdf <- data.frame(ts = div,tsstr = tsStr)
# for 10 mins
df.test$pred <- fc$mean
if(use10min == F){
df.test$ts10min <- add_ts(df.test$timeStamp,pred.start,pred.end,10)
df.test.10min <- data.frame(WIFIAPTag = df.test$WIFIAPTag[1],
timeStamp = levels(df.test$ts10min),
real = as.numeric(tapply(df.test$passengerCount,df.test$ts10min,sum)),
passengerCount = as.numeric(tapply(df.test$pred,df.test$ts10min,sum)))
df.error <- df.test.10min
}else{
df.error <- df.test
}
# error calculate
df.error$error <- (df.error$passengerCount - df.error$pred)^2
df
}
x <- test_arima(obj.Para[[1]])
plot_comp(x)
test_arima <- function(df,use10min = T){
cat(sprintf('test_AFR::test_arima\tWIFIAPTag:%s\twid:%.0f\n',
df$WIFIAPTag[1],df$wid[1]))
pred.start <- as.POSIXct('2016-09-13 15:00:00',tz = 'UTC')
pred.end <- as.POSIXct('2016-09-13 18:00:00',tz = 'UTC')
# timeStamp divide
int.min <- ifelse(use10min,10,1)
div <- seq.POSIXt(pred.start,pred.end,int.min*60)
div <- div[1:(length(div)-1)]
# generate train and test
df.train <- subset(df,timeStamp < pred.start)
df.test <- subset(df,timeStamp < pred.end & timeStamp >= pred.start)
# generate time seris data, build the arima model and forecast new data
tsdata <- ts(df.train$passengerCount,start = c(2016),frequency = 1440/int.min)
fit <- auto.arima(tsdata,D = 1)
fc <- forecast.Arima(fit,h = length(div))
plot(fc)
# generate timeStamp string for result submit
tsStr <- as.character(div)
tsStr <- paste(substr(tsStr,1,10),substr(tsStr,12,13),as.numeric(substr(tsStr,15,16))/int.min,sep='-')
tsdf <- data.frame(ts = div,tsstr = tsStr)
# for 10 mins
df.test$pred <- fc$mean
if(use10min == F){
df.test$ts10min <- add_ts(df.test$timeStamp,pred.start,pred.end,10)
df.test.10min <- data.frame(WIFIAPTag = df.test$WIFIAPTag[1],
timeStamp = levels(df.test$ts10min),
passengerCount = as.numeric(tapply(df.test$passengerCount,df.test$ts10min,sum)),
pred = as.numeric(tapply(df.test$pred,df.test$ts10min,sum)))
df.error <- df.test.10min
}else{
df.error <- df.test
}
# error calculate
df.error$error <- (df.error$passengerCount - df.error$pred)^2
df.error
}
x <- test_arima(obj.Para[[1]])
plot_comp(x)
x <- test_arima(obj.Para[[2]])
plot_comp(x)
View(x)
y <- x
y$pred <- y$pred + 40
plot_comp(x)
plot_comp(y)
source('~/Code/R/TC_airport/dirFunc.R')
y$error <- error_calc(y)
sum(y$error)
mean(x$pred)
mean(x$passengerCount)
y <- x
y$pred <- y$pred + 50
plot_comp(y)
y$error <- error_calc(y)
sum(y$error)
View(y)
cat(sprintf('test_AFR::test_arima\tWIFIAPTag:%s\twid:%.0f\n',
df$WIFIAPTag[1],df$wid[1]))
pred.start <- as.POSIXct('2016-09-13 12:00:00',tz = 'UTC')
pred.end <- as.POSIXct('2016-09-13 18:00:00',tz = 'UTC')
# timeStamp divide
int.min <- ifelse(use10min,10,1)
div <- seq.POSIXt(pred.start,pred.end,int.min*60)
div <- div[1:(length(div)-1)]
# generate train and test
df.train <- subset(df,timeStamp < pred.start)
df.test <- subset(df,timeStamp < pred.end & timeStamp >= pred.start)
# generate time seris data, build the arima model and forecast new data
tsdata <- ts(df.train$passengerCount,start = c(2016),frequency = 1440/int.min)
fit <- auto.arima(tsdata,D = 1)
fc <- forecast.Arima(fit,h = length(div))
plot(fc)
df.test$pred <- fc$mean
View(df.test)
plot_comp(df.test)
pred.realstart <- as.POSIXct('2016-09-13 15:00:00',tz = 'UTC')
View(df.error)
tmp1 <- subset(df.test,timeStamp < pred.realstart)
tmp2 <- subset(df.test,timeStamp >= pred.realstart)
avg.diff <- mean(tmp1$passengerCount) - mean(tmp1$pred)
# Convert 1 minutes pc to 10 minutes pc
conv_10min <- function(df.test){
df.test$ts10min <- add_ts(df.test$timeStamp,pred.start,pred.end,10)
df.test.10min <- data.frame(WIFIAPTag = df.test$WIFIAPTag[1],
timeStamp = levels(df.test$ts10min),
passengerCount = as.numeric(tapply(df.test$passengerCount,df.test$ts10min,sum)),
pred = as.numeric(tapply(df.test$pred,df.test$ts10min,sum)))
df.test.10min
}
# Average move based on predicted value with real value
avg_move <- function(df.test,pred.realstart){
tmp.known <- subset(df.test,timeStamp < pred.realstart)
tmp.pred <- subset(df.test,timeStamp >= pred.realstart)
avg.diff <- mean(tmp.known$passengerCount) - mean(tmp.known$pred)
tmp.pred$pred <- tmp.pred$pred + avg.diff
tmp.pred
}
source('~/Code/R/TC_airport/arimaFunc.R')
test_arima(obj.Para[[1]])
df <- obj.Para[[1]]
cat(sprintf('test_AFR::test_arima\tWIFIAPTag:%s\twid:%.0f\n',
df$WIFIAPTag[1],df$wid[1]))
pred.start <- as.POSIXct('2016-09-13 12:00:00',tz = 'UTC')
pred.realstart <- as.POSIXct('2016-09-13 15:00:00',tz = 'UTC')
pred.end <- as.POSIXct('2016-09-13 18:00:00',tz = 'UTC')
# timeStamp divide
int.min <- ifelse(use10min,10,1)
div <- seq.POSIXt(pred.start,pred.end,int.min*60)
div <- div[1:(length(div)-1)]
# generate train and test
df.train <- subset(df,timeStamp < pred.start)
df.test <- subset(df,timeStamp < pred.end & timeStamp >= pred.start)
# generate time seris data, build the arima model and forecast new data
tsdata <- ts(df.train$passengerCount,start = c(2016),frequency = 1440/int.min)
fit <- auto.arima(tsdata,D = 1)
fc <- forecast.Arima(fit,h = length(div))
plot(fc)
tsStr <- as.character(div)
tsStr <- paste(substr(tsStr,1,10),substr(tsStr,12,13),as.numeric(substr(tsStr,15,16))/int.min,sep='-')
tsdf <- data.frame(ts = div,tsstr = tsStr)
# average move
df.test$pred <- fc$mean
df.test <- avg_move(df.test,pred.realstart)
# for 10 mins
df.error <- ifelse(use10min,df.test,conv_10min(df.test))
View(df.test)
cat(sprintf('test_AFR::test_arima\tWIFIAPTag:%s\twid:%.0f\n',df$WIFIAPTag[1],df$wid[1]))
pred.start <- as.POSIXct('2016-09-13 12:00:00',tz = 'UTC')
pred.realstart <- as.POSIXct('2016-09-13 15:00:00',tz = 'UTC')
pred.end <- as.POSIXct('2016-09-13 18:00:00',tz = 'UTC')
# timeStamp divide
int.min <- ifelse(use10min,10,1)
div <- seq.POSIXt(pred.start,pred.end,int.min*60)
div <- div[1:(length(div)-1)]
# generate train and test
df.train <- subset(df,timeStamp < pred.start)
df.test <- subset(df,timeStamp < pred.end & timeStamp >= pred.start)
# generate time seris data, build the arima model and forecast new data
tsdata <- ts(df.train$passengerCount,start = c(2016),frequency = 1440/int.min)
fit <- auto.arima(tsdata,D = 1)
fc <- forecast.Arima(fit,h = length(div))
plot(fc)
tsStr <- as.character(div)
tsStr <- paste(substr(tsStr,1,10),substr(tsStr,12,13),as.numeric(substr(tsStr,15,16))/int.min,sep='-')
tsdf <- data.frame(ts = div,tsstr = tsStr)
# average move
df.test$pred <- fc$mean
df.test.trunc <- avg_move(df.test,pred.realstart)
View(df.test.trunc)
View(df.test)
plot_comp(df.test)
plot_comp(df.test.trunc)
# for 10 mins
df.error <- ifelse(use10min,df.test.trunc,conv_10min(df.test.trunc))
use10min
df.error <- ifelse(use10min,df.test.trunc,conv_10min(df.test.trunc))
df.test.trunc <- avg_move(df.test,pred.realstart)
# for 10 mins
df.error <- ifelse(use10min,df.test.trunc,conv_10min(df.test.trunc))
df.error <- df.test.trunc
df.error <- ifelse(use10min,df.test.trunc,conv_10min(df.test.trunc))
use10min
df.test.trunc
conv_10min(df.test.trunc)
if(use10min){
df.error <- df.test.trunc
}else{
df.error <- conv_10min(df.test.trunc)
}
df.error$error <- error_calc(df.error)
df.error
sum(df.error$error)
df.test$error <- error_calc(df.test)
sum(df.test$error)
sum(df.test$error[19:36])
View(df.error)
View(df.test)
plot_comp(df.test)
plot_comp(df.test[19:36,])
plot_comp(df.error)
View(df.test.trunc)
View(df.error)
df.error$error <- error_calc(df.error)
df.test$error <- error_calc(df.test)
View(df.test)
View(df.error)
25.94-17
8.94^2
32.412224-17
15.4^2
df.test$error <- error_calc(df.test)
source('~/Code/R/TC_airport/dirFunc.R')
df.error <- ifelse(use10min,df.test.trunc,conv_10min(df.test.trunc))
df.test.trunc <- ifelse(avgMove,
avg_move(df.test,pred.realstart),
subset(df.test,timeStamp >= pred.realstart))
avgMove <- T
df.test.trunc <- ifelse(avgMove,
avg_move(df.test,pred.realstart),
subset(df.test,timeStamp >= pred.realstart))
?ifelse
ifelse(avgMove,
df.test.trunc <- avg_move(df.test,pred.realstart),
df.test.trunc <- subset(df.test,timeStamp >= pred.realstart))
source('~/Code/R/TC_airport/arimaFunc.R')
source('~/Code/R/TC_airport/test_arima.R')
r1 <- do.call(rbind(r))
r1 <- do.call(rbind,r
)
sum(r1$error)
sum(r1$error)*25
cat(sprintf('The sum.error is %d for %d APs',sum(r1$error),length(r)))
cat(sprintf('The sum.error is %i for %d APs',sum(r1$error),length(r)))
cat(sprintf('The sum.error is %e for %d APs',sum(r1$error),length(r)))
cat(sprintf('The sum.error is %.2f for %d APs',sum(r1$error),length(r)))
system.time(source('test_arima.R'))
a <- test_arima(obj.Para[[10]])
system.time(a <- test_arima(obj.Para[[10]]))
source('~/Code/R/TC_airport/arimaFunc.R')
source('~/Code/R/TC_airport/test_arima.R')
