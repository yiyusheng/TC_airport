require(forecast)
require(plyr)
require(e1071)
# require(mxnet)
# require(randomForest)
load(file.path(dir_data,'dataLoad2nd.Rda'))
# S1. Get flight information without share code flight
data.flights.raw <- data.flights
list[data.flights,data.share] <- raw.flight(data.flights.raw,data.gates,levels(data.departure$flight_ID))
save(data.flights,data.flights.raw,data.share,file = file.path(dir_data,'data.flight.Rda'))
rm(list = ls())
source('head.R')
source('util.R')
source('dirFunc.R')
source('group.forecast.R')
source('group.forecast.func.R')
source('area_feature.R')
require(forecast)
require(plyr)
require(e1071)
# require(mxnet)
# require(randomForest)
load(file.path(dir_data,'dataLoad2nd.Rda'))
# S1. Get flight information without share code flight
data.flights.raw <- data.flights
psg.flight <- levels(data.departure$flight_ID)
data.flights$BGATE_AREA <- data.gates$BGATE_AREA[match(data.flights$BGATE_ID,data.gates$BGATE_ID)]
data.flights$subcol <- factor(paste(data.flights$scheduled_flt_time,
data.flights$actual_flt_time,data.flights$BGATE_ID,sep='-'))
data.flights$inpsg <- 2
data.flights$inpsg[data.flights$flight_ID %in% psg.flight] <- 1
data.flights <- factorX(data.flights)
# find the shared code flights for one day and select a main one(priori to select flight in the data.departure table as the main flight)
tmp <- by(data.flights,data.flights$subcol,function(x){
x <- x[order(x$inpsg,x$flight_ID),]
fid <- fct2ori(x$flight_ID[1])
tmp <- x[1,]
# collect the shared one
tmp1 <- setdiff(x$flight_ID,fid)
if(length(tmp1) == 0)tmp1 <- 'Only'
share.fli <- data.frame(main = fid,share = tmp1,date = x$scheduled_flt_time[1])
list(fli = tmp,share = share.fli)
})
data.fli <- do.call(rbind,lapply(tmp,function(x)x$fli))
data.flishare <- do.call(rbind,lapply(tmp,function(x)x$share))
data.fli$subcol <- NULL
row.names(data.fli) <- NULL
row.names(data.flishare) <- NULL
data.flishare <- data.flishare[!duplicated(data.flishare[,c('main','share')]),]
data.fli$flight_ID <- factor(data.fli$flight_ID)
data.fli$BGATE_ID <- factor(data.fli$BGATE_ID)
data.fli$BGATE_AREA <- factor(data.fli$BGATE_AREA)
data.flishare$main <- factor(data.flishare$main)
data.flishare$share <- factor(data.flishare$share)
dup.fli <- factorX(subset(meltX(data.fli$flight_ID,as.Date(data.fli$scheduled_flt_time)),value != 1))
data.fli$date <- as.Date(data.fli$scheduled_flt_time)
data.fli <- merge(data.fli,dup.fli,by.x = c('flight_ID','date'),by.y = c('x','y'),all.x = T)
dup.fli0 <- subset(data.fli,!is.na(value))
data.fli <- subset(data.fli,is.na(value))
allNeed <- c('CA3804','CA4351','HU7272')
dup.fliA <- subset(dup.fli0,flight_ID %in% allNeed)
dup.fliB <- subset(dup.fli0,!(flight_ID) %in% allNeed)
dup.fliB <- subset(dup.fliB,BGATE_ID != '')
dup.fliC <- factorX(rbind(dup.fliA,dup.fliB))
data.fli <- factorX(rbind(dup.fliC,data.fli))
data.fli$date <- NULL
data.fli$inpsg <- NULL
data.fli$value <- NULL
rm(list = ls())
source('head.R')
source('util.R')
source('dirFunc.R')
source('group.forecast.R')
source('group.forecast.func.R')
source('area_feature.R')
require(forecast)
require(plyr)
require(e1071)
# require(mxnet)
# require(randomForest)
load(file.path(dir_data,'dataLoad2nd.Rda'))
# S1. Get flight information without share code flight
data.flights.raw <- data.flights
list[data.flights,data.share] <- raw.flight(data.flights.raw,data.gates,levels(data.departure$flight_ID))
save(data.flights,data.flights.raw,data.share,file = file.path(dir_data,'data.flight.Rda'))
load(file.path(dir_data,'data.flight.Rda'))
data.securecheck <- factorX(subset(data.securecheck,!(flight_ID %in% data.share$share)))
# S3. generate data.
train <- rawTrain()
test <- rawTestA()
itv <- 10
# Feature1. number of flights.
tsSet <- seq.POSIXt(as.p(factor('2016-09-10 19:00:00')),as.p(factor('2016-09-25 18:00:00')),60*itv)
# ftr.flight <- get_area_feature(tsSet,data.flights,data.gates)
# save(ftr.flight,file = file.path(dir_data,'ftr.flight.Rda'))
load(file.path(dir_data,'ftr.flight.Rda'))
dep <- data.departure;
fli <- data.flights
df <- dep
names(df)[names(df) == 'security_time' | names(df) == 'checkin_time'] <- 'dtime'
df <- subset(df,dtime >= as.p(factor('2016-09-11')) & dtime < as.p(factor('2016-09-26')))
df$flt_date <- as.Date(df$dtime)
# How many passengers per flight in each day
tmp <- melt(table(df$flight_ID,df$flt_date))
names(tmp) <- c('flight_ID','date','passengerCount')
tmp$date <- as.Date(tmp$date)
# Filter data on date with uncomplete records
tmp <- factorX(subset(tmp,passengerCount != 0 &
date != as.Date('2016-09-25') & date != as.Date('2016-09-10')))
# calculate the mean passengercount for each flight
tmp1 <- melt(tapply(tmp$passengerCount,tmp$flight_ID,function(x){
# if(length(x) <= 3)return(0)
tmp <- quantile(x)
mean(tmp[-c(1,10)])
}))
names(tmp1) <- c('flight_ID','meanPsg')
# Because we only have flight data to do prediction. so flight not in flight table is useless. We add passengerCount for each flight
tmp1 <- factorX(subset(tmp1,meanPsg != 0 & flight_ID %in% data.flights$flight_ID))
data.flights$meanPsg <- tmp1$meanPsg[match(data.flights$flight_ID,tmp1$flight_ID)]
# calculate for each gate/area
data.fli <- factorX(subset(data.flights,!is.na(meanPsg)))
meanPsg.gate <- melt(tapply(data.fli$meanPsg,data.fli$BGATE_ID,mean))
meanPsg.area <- melt(tapply(data.fli$meanPsg,data.fli$BGATE_AREA,mean))
View(meanPsg.gate)
a <- melt(table(data.flights$BGATE_ID))
View(a)
b <- a[nchar(a$Var1) > 5,]
b <- a[nchar(fct2ori(a$Var1)) > 5,]
View(b)
b$A <- gsub('.*,','',b$Var1)
b$B <- gsub(',.*')
b$B <- gsub(',.*','',b$Var1)
b$Acount <- a$value[match(b$A,a$Var1)]
b$Bcount <- a$value[match(b$B,a$Var1)]
View(data.flights)
rm(list = ls())
source('head.R')
source('util.R')
source('dirFunc.R')
source('group.forecast.R')
source('group.forecast.func.R')
source('area_feature.R')
require(forecast)
require(plyr)
require(e1071)
# require(mxnet)
# require(randomForest)
load(file.path(dir_data,'dataLoad2nd.Rda'))
# S1. Get flight information without share code flight
data.flights.raw <- data.flights
list[data.flights,data.share] <- raw.flight(data.flights.raw,data.gates,levels(data.departure$flight_ID))
save(data.flights,data.flights.raw,data.share,file = file.path(dir_data,'data.flight.Rda'))
View(plot_comp)
View(data.flights)
a <- melt(table(data.flights$BGATE_ID))
View(a)
load(file.path(dir_data,'data.flight.Rda'))
# S2. remove items in securecheck whose flight_ID is not a main one.
# All flight_ID in data.departure are main flight_IDs
data.securecheck <- factorX(subset(data.securecheck,!(flight_ID %in% data.share$share)))
# S3. generate data.
train <- rawTrain()
test <- rawTestA()
itv <- 10
# Feature1. number of flights.
tsSet <- seq.POSIXt(as.p(factor('2016-09-10 19:00:00')),as.p(factor('2016-09-25 18:00:00')),60*itv)
# ftr.flight <- get_area_feature(tsSet,data.flights,data.gates)
# save(ftr.flight,file = file.path(dir_data,'ftr.flight.Rda'))
load(file.path(dir_data,'ftr.flight.Rda'))
# Feature2. number of passengerCount.
df <- data.departure
fli <- data.flights
names(df)[names(df) == 'security_time' | names(df) == 'checkin_time'] <- 'dtime'
df <- subset(df,dtime >= as.p(factor('2016-09-11')) & dtime < as.p(factor('2016-09-26')))
df$flt_date <- as.Date(df$dtime)
# How many passengers per flight in each day
tmp <- melt(table(df$flight_ID,df$flt_date))
names(tmp) <- c('flight_ID','date','passengerCount')
tmp$date <- as.Date(tmp$date)
# Filter data on date with uncomplete records
tmp <- factorX(subset(tmp,passengerCount != 0 &
date != as.Date('2016-09-25') & date != as.Date('2016-09-10')))
# calculate the mean passengercount for each flight
tmp1 <- melt(tapply(tmp$passengerCount,tmp$flight_ID,function(x){
# if(length(x) <= 3)return(0)
tmp <- quantile(x)
mean(tmp[-c(1,10)])
}))
names(tmp1) <- c('flight_ID','meanPsg')
# Because we only have flight data to do prediction. so flight not in flight table is useless. We add passengerCount for each flight
tmp1 <- factorX(subset(tmp1,meanPsg != 0 & flight_ID %in% data.flights$flight_ID))
data.flights$meanPsg <- tmp1$meanPsg[match(data.flights$flight_ID,tmp1$flight_ID)]
# calculate for each gate/area
data.fli <- factorX(subset(data.flights,!is.na(meanPsg)))
meanPsg.gate <- melt(tapply(data.fli$meanPsg,data.fli$BGATE_ID,mean))
meanPsg.area <- melt(tapply(data.fli$meanPsg,data.fli$BGATE_AREA,mean))
names(meanPsg.gate) <- c('BGATE_ID','meanPsg')
names(meanPsg.area) <- c('BGATE_AREA','meanPsg')
idx.addgate <- is.na(data.flights$meanPsg)
data.flights$meanPsg[idx.addgate] <- meanPsg.gate$meanPsg[match(data.flights$BGATE_ID[idx.addgate],meanPsg.gate$BGATE_ID)]
idx.addarea <- is.na(data.flights$meanPsg)
data.flights$meanPsg[idx.addarea] <- meanPsg.area$meanPsg[match(data.flights$BGATE_AREA[idx.addarea],meanPsg.area$BGATE_AREA)]
sum(idx.addgate)
sum(idx.addarea)
View(data.flights)
data.flights$meanPsg <- 0
data.flights$meanPsg <- tmp1$meanPsg[match(data.flights$flight_ID,tmp1$flight_ID)]
View(data.flights)
# calculate for each gate/area
data.fli <- factorX(subset(data.flights,!is.na(meanPsg)))
meanPsg.gate <- melt(tapply(data.fli$meanPsg,data.fli$BGATE_ID,mean))
meanPsg.area <- melt(tapply(data.fli$meanPsg,data.fli$BGATE_AREA,mean))
names(meanPsg.gate) <- c('BGATE_ID','meanPsg')
names(meanPsg.area) <- c('BGATE_AREA','meanPsg')
idx.addgate <- is.na(data.flights$meanPsg)
data.flights$meanPsg[idx.addgate] <- meanPsg.gate$meanPsg[match(data.flights$BGATE_ID[idx.addgate],meanPsg.gate$BGATE_ID)]
data.flights$BGATE_ID[idx.addgate]
View(meanPsg.area)
View(meanPsg.gate)
meanPsg.gate <- meanPsg.gate[-1,]
View(meanPsg.gate)
data.flights$meanPsg <- 0
data.fli <- factorX(subset(data.flights,!is.na(meanPsg)))
meanPsg.gate <- melt(tapply(data.fli$meanPsg,data.fli$BGATE_ID,mean))
meanPsg.gate <- meanPsg.gate[-1,]
meanPsg.area <- melt(tapply(data.fli$meanPsg,data.fli$BGATE_AREA,mean))
names(meanPsg.gate) <- c('BGATE_ID','meanPsg')
names(meanPsg.area) <- c('BGATE_AREA','meanPsg')
idx.addgate <- is.na(data.flights$meanPsg)
data.flights$meanPsg[idx.addgate] <- meanPsg.gate$meanPsg[match(data.flights$BGATE_ID[idx.addgate],meanPsg.gate$BGATE_ID)]
idx.addarea <- is.na(data.flights$meanPsg)
sum(data.flights)
sum(idx.addarea)
View(data.flights)
data.flights$meanPsg <- tmp1$meanPsg[match(data.flights$flight_ID,tmp1$flight_ID)]
# calculate for each gate/area
data.fli <- factorX(subset(data.flights,!is.na(meanPsg)))
meanPsg.gate <- melt(tapply(data.fli$meanPsg,data.fli$BGATE_ID,mean))
meanPsg.gate <- meanPsg.gate[-1,]
meanPsg.area <- melt(tapply(data.fli$meanPsg,data.fli$BGATE_AREA,mean))
names(meanPsg.gate) <- c('BGATE_ID','meanPsg')
names(meanPsg.area) <- c('BGATE_AREA','meanPsg')
idx.addgate <- is.na(data.flights$meanPsg)
data.flights$meanPsg[idx.addgate] <- meanPsg.gate$meanPsg[match(data.flights$BGATE_ID[idx.addgate],meanPsg.gate$BGATE_ID)]
idx.addarea <- is.na(data.flights$meanPsg)
data.flights$meanPsg[idx.addarea] <- meanPsg.area$meanPsg[match(data.flights$BGATE_AREA[idx.addarea],meanPsg.area$BGATE_AREA)]
sum(is.na(data.flights$meanPsg))
View(data.flights)
data.flights$meanPsg[idx.addunknow] <- mean(meanPsg.area$meanPsg)
idx.addunknow <- is.na(data.flights$meanPsg)
data.flights$meanPsg[idx.addunknow] <- mean(meanPsg.area$meanPsg)
data.flights.psg <- avg_psg(data.departure,data.flights)
data.flights.sec <- avg_psg(data.securecheck,data.flights)
View(data.flights.sec)
View(data.flights.psg)
data.flights.psg <- avg_psg(data.departure,data.flights)
source('~/Code/R/TC_airport/area_feature.R')
data.flights.psg <- avg_psg(data.departure,data.flights)
data.flights.sec <- avg_psg(data.securecheck,data.flights)
View(meanPsg.area)
View(meanPsg.gate)
mean(meanPsg.gate$meanPsg)
View(data.flights.sec)
View(data.flights.psg)
data.flights.pc <- merge(data.flights.sec,data.flights.psg)
View(data.flights.pc)
names(data.flights.sec)[names(data.flights.sec) == 'meanPsg'] <- 'pc.sec'
names(data.flights.psg)[names(data.flights.psg) == 'meanPsg'] <- 'pc.psg'
names(data.flights.sec)[names(data.flights.sec) == 'meanPsg'] <- 'pc.sec'
data.flights.pc <- merge(data.flights.sec,data.flights.psg)
View(data.flights)
data.flights.pc <- merge(data.flights.sec,data.flights.psg)
View(data.flights.pc)
View(data.flights)
fli <- data.flights
n <- 5
data.flights$BGATE_ID <- gsub('.*,','',data.flights$BGATE_ID)
data.flights$BGATE_ID[data.flights$BGATE_ID == ''] <- 'unknown_gate'
data.flights$BGATE_AREA <- as.character(data.gates$BGATE_AREA[match(data.flights$BGATE_ID,
data.gates$BGATE_ID)])
data.flights$BGATE_AREA[is.na(data.flights$BGATE_AREA)] <- 'unknown_area'
data.flights$BGATE_AREA <- factor(data.flights$BGATE_AREA)
data.flights$BGATE_ID <- factor(data.flights$BGATE_ID)
data.flights <- factorX(data.flights)
View(data.flights)
tsSet <- seq.POSIXt(as.p(factor('2016-09-10 19:00:00')),as.p(factor('2016-09-25 18:00:00')),60*itv)
ts <- tsSet[1233]
ts
ts <- as.p(factor('2016-09-23 15:00:00'))
n = 1
data.fli <- subset(data.flights,scheduled_flt_time >= ts + n * 3600 - 1800 &
scheduled_flt_time < ts + 3600 * (n+1) - 1800)
View(data.fli)
sta.area <- melt(tapply(data.fli$meanPsg,data.fli$BGATE_AREA,sum))
View(sta.area)
sta.area <- melt(tapply(data.fli$meanPsg,data.fli$BGATE_ID,sum))
View(sta.area)
sta.gate <- melt(tapply(data.fli$meanPsg,data.fli$BGATE_ID,sum))
sta.area$value[is.na(sta.area$value)] <- 0
sta.gate$value[is.na(sta.gate$value)] <- 0
tsSet <- seq.POSIXt(as.p(factor('2016-09-10 19:00:00')),as.p(factor('2016-09-25 18:00:00')),60*itv)
ftr.flight <- get_area_feature(tsSet,data.flights,data.gates)
View(data.flights)
tsSet <- seq.POSIXt(as.p(factor('2016-09-10 19:00:00')),as.p(factor('2016-09-25 18:00:00')),60*itv)
ftr.flight.sec <- get_area_feature(tsSet,data.flights,data.gates,attr = pc.sec)
source('~/Code/R/TC_airport/area_feature.R')
ftr.flight.sec <- get_area_feature(tsSet,data.flights,data.gates,attr = pc.sec)
View(data.flights.pc)
save(data.flights.pc,file = file.path(dir_data,'data.flights.pc.Rda'))
ftr.flight.sec <- get_area_feature(tsSet,data.flights,data.gates,attr = pc.sec)
ftr.flight.sec <- get_area_feature(tsSet,data.flights,data.gates,attr = 'pc.sec')
ftr.flight.sec <- get_area_feature(tsSet,data.flights,data.gates,5,attr = 'pc.sec')
attr <- pc.sec
attr <- 'pc.sec'
data.flights$BGATE_ID <- gsub('.*,','',data.flights$BGATE_ID)
data.flights$BGATE_ID[data.flights$BGATE_ID == ''] <- 'unknown_gate'
data.flights$BGATE_AREA <- as.character(data.gates$BGATE_AREA[match(data.flights$BGATE_ID,
data.gates$BGATE_ID)])
data.flights$BGATE_AREA[is.na(data.flights$BGATE_AREA)] <- 'unknown_area'
data.flights$BGATE_AREA <- factor(data.flights$BGATE_AREA)
data.flights$BGATE_ID <- factor(data.flights$BGATE_ID)
data.flights <- factorX(data.flights)
ts <- tsSet[2000]
ts
n=5
data.fli <- subset(data.flights,scheduled_flt_time >= ts + n * 3600 - 1800 &
scheduled_flt_time < ts + 3600 * (n+1) - 1800)
sta.area <- melt(tapply(data.fli[[attr]],data.fli$BGATE_AREA,sum))
ftr.flight.sec <- get_area_feature(tsSet,data.flights.pc,data.gates,attr = 'pc.sec')
View(ftr.flight.sec)
names(ftr.flight.sec)
ftr.flight.psg <- get_area_feature(tsSet,data.flights.pc,data.gates,attr = 'pc.psg')
save(ftr.flight.sec,ftr.flight.psg,file = file.path(dir_data,'ftr.flight.Rda'))
source('~/Code/R/TC_airport/runOne.R')
View(pred.ext.flight.lr.sec)
View(pred.ext.flight.lr.psg)
sum(pred.ext.flight.lr.psg$error)
sum(pred.ext.flight.lr.sec$error)
plot_comp(pred.ext.flight.lr.psg[pred.ext.flight.lr.psg$WIFIAPTag == 'E1-1A-1<E1-1-01>
'])
plot_comp(pred.ext.flight.lr.psg[pred.ext.flight.lr.psg$WIFIAPTag == pred.ext.flight.lr.psg$WIFIAPTag[1],])
a <- melt(tapply(pred.ext.flight.lr.psg$error,pred.ext.flight.lr.psg$WIFIAPTag,sum))
View(a)
plot_comp(pred.ext.flight.lr.psg[pred.ext.flight.lr.psg$WIFIAPTag == levels(pred.ext.flight.lr.psg$WIFIAPTag)[135"135"],])
plot_comp(pred.ext.flight.lr.psg[pred.ext.flight.lr.psg$WIFIAPTag == levels(pred.ext.flight.lr.psg$WIFIAPTag)[135],])
#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# Filename: runOne.R
#
# Description:
#
# Copyright (c) 2016, Yusheng Yi <yiyusheng.hust@gmail.com>
#
# Version 1.0
#
# Initial created: 2016-10-15 15:26:47
#
# Last   modified: 2016-10-15 15:26:49
rm(list = ls())
source('head.R')
source('util.R')
source('dirFunc.R')
source('group.forecast.R')
source('group.forecast.func.R')
source('area_feature.R')
require(forecast)
require(plyr)
require(e1071)
# require(mxnet)
# require(randomForest)
load(file.path(dir_data,'dataLoad2nd.Rda'))
# S1. Get flight information without share code flight and remove the wrong flight whose actual_flt_time is less than scheduled_flt_time
data.flights.raw <- data.flights
list[data.flights,data.share] <- raw.flight(data.flights.raw,data.gates,levels(data.departure$flight_ID))
data.flights <- add_delay(data.flights)
save(data.flights,data.flights.raw,data.share,file = file.path(dir_data,'data.flight.Rda'))
load(file.path(dir_data,'data.flight.Rda'))
# S2. remove items in securecheck whose flight_ID is not a main one.
# All flight_ID in data.departure are main flight_IDs
data.securecheck <- factorX(subset(data.securecheck,!(flight_ID %in% data.share$share)))
# S3. generate data.
train <- rawTrain()
test <- rawTestA()
itv <- 10
# number of passengerCount for each flight
data.flights.psg <- avg_psg(data.departure,data.flights)
names(data.flights.psg)[names(data.flights.psg) == 'meanPsg'] <- 'pc.psg'
data.flights.sec <- avg_psg(data.securecheck,data.flights)
names(data.flights.sec)[names(data.flights.sec) == 'meanPsg'] <- 'pc.sec'
data.flights.pc <- merge(data.flights.sec,data.flights.psg)
save(data.flights.pc,file = file.path(dir_data,'data.flights.pc.Rda'))
load(file.path(dir_data,'data.flights.pc.Rda'))
# Feature1. number of flights.
tsSet <- seq.POSIXt(as.p(factor('2016-09-10 19:00:00')),as.p(factor('2016-09-25 18:00:00')),60*itv)
ftr.flight.sec.schedule <- get_area_feature(tsSet,data.flights.pc,data.gates,attr = 'pc.sec',attrTime = 'scheduled_flt_time')
ftr.flight.psg.schedule <- get_area_feature(tsSet,data.flights.pc,data.gates,attr = 'pc.psg',attrTime = 'scheduled_flt_time')
load(file.path(dir_data,'data.flights.pc.Rda'))
View(data.flights.pc)
data.flights <- data.flights.pc
attr = 'pc.sec';attrTime = 'scheduled_flt_time'
data.flights$BGATE_ID <- gsub('.*,','',data.flights$BGATE_ID)
data.flights$BGATE_ID[data.flights$BGATE_ID == ''] <- 'unknown_gate'
data.flights$BGATE_AREA <- as.character(data.gates$BGATE_AREA[match(data.flights$BGATE_ID,
data.gates$BGATE_ID)])
data.flights$BGATE_AREA[is.na(data.flights$BGATE_AREA)] <- 'unknown_area'
data.flights$BGATE_AREA <- factor(data.flights$BGATE_AREA)
data.flights$BGATE_ID <- factor(data.flights$BGATE_ID)
data.flights <- factorX(data.flights)
data.fli <- factorX(data.flights[data.flights[[attrTime]] >= ts + n * 3600 &
data.flights[[attrTime]] < ts + 3600 * (n+1),])
n=1
data.fli <- factorX(data.flights[data.flights[[attrTime]] >= ts + n * 3600 &
data.flights[[attrTime]] < ts + 3600 * (n+1),])
attrTime
View(data.flights)
ts
ts <- tsSet[2000]
ts
data.fli <- factorX(data.flights[data.flights[[attrTime]] >= ts + n * 3600 &
data.flights[[attrTime]] < ts + 3600 * (n+1),])
sta.area <- melt(tapply(data.fli[[attr]],data.fli$BGATE_AREA,sum))
sta.gate <- melt(tapply(data.fli[[attr]],data.fli$BGATE_ID,sum))
sta.area$value[is.na(sta.area$value)] <- 0
sta.gate$value[is.na(sta.gate$value)] <- 0
ftr.area <- lapply(tsSet,group_flight_feature,data.flights,n,attr,attrTime)
data.fli <- data.flights[data.flights[[attrTime]] >= ts + n * 3600 & data.flights[[attrTime]] < ts + 3600 * (n+1),]
sta.area <- melt(tapply(data.fli[[attr]],data.fli$BGATE_AREA,sum))
sta.gate <- melt(tapply(data.fli[[attr]],data.fli$BGATE_ID,sum))
sta.area$value[is.na(sta.area$value)] <- 0
sta.gate$value[is.na(sta.gate$value)] <- 0
load(file.path(dir_data,'data.flights.pc.Rda'))
tsSet <- seq.POSIXt(as.p(factor('2016-09-10 19:00:00')),as.p(factor('2016-09-25 18:00:00')),60*itv)
ftr.flight.sec.schedule <- get_area_feature(tsSet,data.flights.pc,data.gates,attr = 'pc.sec',attrTime = 'scheduled_flt_time')
ftr.flight.psg.schedule <- get_area_feature(tsSet,data.flights.pc,data.gates,attr = 'pc.psg',attrTime = 'scheduled_flt_time')
ftr.flight.sec.actual <- get_area_feature(tsSet,data.flights.pc,data.gates,attr = 'pc.sec',attrTime = 'actual_flt_time')
source('~/Code/R/TC_airport/area_feature.R')
load(file.path(dir_data,'data.flights.pc.Rda'))
# Feature1. number of flights.
tsSet <- seq.POSIXt(as.p(factor('2016-09-10 19:00:00')),as.p(factor('2016-09-25 18:00:00')),60*itv)
ftr.flight.sec.schedule <- get_area_feature(tsSet,data.flights.pc,data.gates,attr = 'pc.sec',attrTime = 'scheduled_flt_time')
ftr.flight.psg.schedule <- get_area_feature(tsSet,data.flights.pc,data.gates,attr = 'pc.psg',attrTime = 'scheduled_flt_time')
ftr.flight.sec.actual <- get_area_feature(tsSet,data.flights.pc,data.gates,attr = 'pc.sec',attrTime = 'actual_flt_time')
#!/usr/bin/env python2
# -*- coding: utf-8 -*-
# Filename: runOne.R
#
# Description:
#
# Copyright (c) 2016, Yusheng Yi <yiyusheng.hust@gmail.com>
#
# Version 1.0
#
# Initial created: 2016-10-15 15:26:47
#
# Last   modified: 2016-10-15 15:26:49
rm(list = ls())
source('head.R')
source('util.R')
source('dirFunc.R')
source('group.forecast.R')
source('group.forecast.func.R')
source('area_feature.R')
require(forecast)
require(plyr)
require(e1071)
# require(mxnet)
# require(randomForest)
load(file.path(dir_data,'dataLoad2nd.Rda'))
# S1. Get flight information without share code flight and remove the wrong flight whose actual_flt_time is less than scheduled_flt_time
# data.flights.raw <- data.flights
# list[data.flights,data.share] <- raw.flight(data.flights.raw,data.gates,levels(data.departure$flight_ID))
# data.flights <- add_delay(data.flights)
# save(data.flights,data.flights.raw,data.share,file = file.path(dir_data,'data.flight.Rda'))
load(file.path(dir_data,'data.flight.Rda'))
# S2. remove items in securecheck whose flight_ID is not a main one.
# All flight_ID in data.departure are main flight_IDs
data.securecheck <- factorX(subset(data.securecheck,!(flight_ID %in% data.share$share)))
# S3. generate data.
train <- rawTrain()
test <- rawTestA()
itv <- 10
# number of passengerCount for each flight
# data.flights.psg <- avg_psg(data.departure,data.flights)
# names(data.flights.psg)[names(data.flights.psg) == 'meanPsg'] <- 'pc.psg'
# data.flights.sec <- avg_psg(data.securecheck,data.flights)
# names(data.flights.sec)[names(data.flights.sec) == 'meanPsg'] <- 'pc.sec'
# data.flights.pc <- merge(data.flights.sec,data.flights.psg)
# save(data.flights.pc,file = file.path(dir_data,'data.flights.pc.Rda'))
load(file.path(dir_data,'data.flights.pc.Rda'))
# Feature1. number of flights.
tsSet <- seq.POSIXt(as.p(factor('2016-09-10 19:00:00')),as.p(factor('2016-09-25 18:00:00')),60*itv)
ftr.flight.sec.schedule <- get_area_feature(tsSet,data.flights.pc,data.gates,attr = 'pc.sec',attrTime = 'scheduled_flt_time')
ftr.flight.psg.schedule <- get_area_feature(tsSet,data.flights.pc,data.gates,attr = 'pc.psg',attrTime = 'scheduled_flt_time')
ftr.flight.sec.actual <- get_area_feature(tsSet,data.flights.pc,data.gates,attr = 'pc.sec',attrTime = 'actual_flt_time')
ftr.flight.psg.actual <- get_area_feature(tsSet,data.flights.pc,data.gates,attr = 'pc.psg',attrTime = 'actual_flt_time')
save(ftr.flight.sec.schedule,ftr.flight.psg.schedule,
ftr.flight.sec.actual,ftr.flight.psg.actual,
file = file.path(dir_data,'ftr.flight.Rda'))
load(file.path(dir_data,'ftr.flight.Rda'))
source('~/Code/R/TC_airport/runOne.R')
sum(pred.ext.flight.lr.psg.act$error)
sum(pred.ext.flight.lr.psg.sch$error)
sum(pred.ext.flight.lr.sec.act$error)
sum(pred.ext.flight.lr.sec.sch$error)
sum(pred.ext.flight.svm.psg.sch$error)
sum(pred.ext.flight.svm.sec.act)
sum(pred.ext.flight.svm.sec.act$error)
sum(pred.ext.flight.svm.sec.sch$error)
system.time(pred.ext.flight.svm.psg.sch <- group.forecast(train,test,'lm.external.flight',
ftr.flight.psg.schedule,mod.func = 'svm',itv = 10))
system.time(pred.ext.flight.svm.psg.act <- group.forecast(train,test,'lm.external.flight',
ftr.flight.psg.actual,mod.func = 'svm',itv = 10))
